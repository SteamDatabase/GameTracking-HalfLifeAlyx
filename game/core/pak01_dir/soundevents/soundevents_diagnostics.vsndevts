{
	Diagnostic.timed_silence = 
	{
		type = "diagnostic.timed_silence"
		interval = 10.000000
	}
	Diagnostic.start_n_soundevents = 
	{
		type = "diagnostic.start_n_soundevents"
		soundevent_number = 100.000000
	}
	Diagnostic.simple_beep = 
	{
		type = "core_start_simple_oneshot"
		volume = 1.000000
		vsnd_files = "sounds/diagnostics/beep.vsnd"
	}
	Diagnostic.AAAAA_editTESTER = 
	{
		type = "core_start_simple_oneshot"
		volume = 0.500000
		vsnd_files = "sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd"
	}
	Diagnostic.Bell.Spatial.Center = 
	{
		type = "src1_3d"
		vsnd_files = 
		[
			"sounds/diagnostics/bell.vsnd",
		]
	}
	Diagnostic.Bell.Spatial.30FeetY = 
	{
		type = "src1_3d"
		position = 
		[
			0.000000,
			360.000000,
			64.000000,
		]
		vsnd_files = 
		[
			"sounds/diagnostics/bell.vsnd",
		]
	}
	Diagnostic.timed_beeper = 
	{
		type = "diagnostic.timed_beeper"
		pitch = 1.000000
		vsnd_files = "sounds/diagnostics/beep.vsnd"
	}
	Diagnostic.update_test_reference_op = 
	{
		type = "core_start_simple_oneshot"
		volume = 0.500000
		vsnd_files = "sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd"
	}
	Diagnostic.update_test_start_stack_vsnd_rand_oneshot = 
	{
		type = "update_test_start_stack_vsnd_rand_oneshot"
		file_list_stack_name = "diagnostics_vsnd_lists"
		file_list_operator_name = "bird_variations"
		file_list_field_name = "vsnd_files"
	}
	Diagnostic.update_test_start_vsnd_rand_oneshot = 
	{
		type = "update_test_start_vsnd_rand_oneshot"
		delay = 0.000000
		vsnd_files = 
		[
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01b.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02b.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird03.vsnd",
		]
	}
	Diagnostic.update_test_start_vsnd_rand_oneshot_restart = 
	{
		type = "update_test_start_vsnd_rand_oneshot"
		delay = 0.000000
		restart_time = 9.000000
		time_scale = 2.000000
		vsnd_files = 
		[
			"sounds/diagnostics/beep_headtail_10sec_restart_9sec.vsnd",
		]
	}
	Diagnostic.update_test_start_event_vsnd_rand_oneshot = 
	{
		type = "update_test_start_event_vsnd_rand_oneshot"
		delay = 0.000000
		vsnd_files = 
		[
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01b.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02b.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird03.vsnd",
		]
	}
	Diagnostic.update_test_start_event_vsnd_rand_weighted_oneshot = 
	{
		type = "update_test_start_event_vsnd_rand_weighted_oneshot"
		delay = 0.000000
		vsnd_files = 
		[
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01b.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird02b.vsnd",
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird03.vsnd",
		]
		weights = 
		[
			1.000000,
			2.000000,
			3.000000,
			4.000000,
			5.000000,
		]
	}
	Diagnostic.test_timers = 
	{
		type = "test_timers"
	}
	Diagnostic.test_start_soundevent = 
	{
		type = "test_start_soundevent"
	}
	Diagnostic.update_test_start_vsnd_lfo = 
	{
		type = "update_test_start_vsnd_lfo"
	}
	Diagnostic.update_test_start_vsnd_flo = 
	{
		type = "update_test_start_vsnd_lfo"
	}
	Diagnostic.update_test_convar = 
	{
		type = "update_test_convar"
	}
	Diagnostic.update_test_delta = 
	{
		type = "update_test_delta"
	}
	Diagnostic.update_test_entity_info = 
	{
		type = "update_test_entity_info"
	}
	Diagnostic.update_test_falloff = 
	{
		type = "update_test_falloff"
	}
	Diagnostic.update_test_float_filter = 
	{
		type = "update_test_float_filter"
	}
	Diagnostic.update_test_mixer = 
	{
		type = "update_test_mixer"
	}
	Diagnostic.update_test_opvar = 
	{
		type = "update_test_opvar"
	}
	Diagnostic.update_test_opvar_stack_sequence = 
	{
		type = "update_test_opvar_stack_sequence"
	}
	Diagnostic.update_test_opvar_event_sequence = 
	{
		type = "update_test_opvar_event_sequence"
		float_sequence = 
		[
			1.000000,
			2.000000,
			3.000000,
			4.000000,
			5.000000,
			6.000000,
			7.000000,
			8.000000,
			9.000000,
		]
	}
	Diagnostic.update_test_opvar_event_multi_sequence = 
	{
		type = "update_test_opvar_event_multi_sequence"
		float_sequence1 = 
		[
			1.000000,
			2.000000,
			3.000000,
			4.000000,
		]
		float_sequence2 = 
		[
			21.000000,
			22.000000,
			23.000000,
			24.000000,
		]
		float_sequence3 = 
		[
			31.000000,
			32.000000,
			33.000000,
			34.000000,
		]
	}
	Diagnostic.update_test_opvar_global_stack_sequence = 
	{
		type = "update_test_opvar_global_stack_sequence"
	}
	Diagnostic.update_test_array_index_global_stack_sequence = 
	{
		type = "update_test_array_index_global_stack_sequence"
	}
	Diagnostic.update_test_array_index_event_sequence = 
	{
		type = "update_test_array_index_event_sequence"
		float_sequence = 
		[
			1.000000,
			2.000000,
			3.000000,
			4.000000,
			5.000000,
			6.000000,
			7.000000,
			8.000000,
			9.000000,
		]
	}
	Diagnostic.update_test_array_index_event_increment = 
	{
		type = "update_test_array_index_event_increment"
		float_sequence = 
		[
			1.000000,
			2.000000,
			3.000000,
			4.000000,
			5.000000,
			6.000000,
			7.000000,
			8.000000,
			9.000000,
		]
	}
	Diagnostic.update_test_array_index_stack_increment = 
	{
		type = "update_test_array_index_stack_increment"
		float_sequence = 0.000000
	}
	Diagnostic.update_test_utils = 
	{
		type = "update_test_utils"
	}
	Diagnostic.update_test_math_string = 
	{
		type = "update_test_math_string"
	}
	Diagnostic.update_test_calc_distance = 
	{
		type = "update_test_calc_distance"
	}
	Diagnostic.update_test_listener_velocity = 
	{
		type = "update_test_listener_velocity"
	}
	Diagnostic.test_goto_exit = 
	{
		type = "test_goto_exit"
	}
	Diagnostic.test_goto_loop_head = 
	{
		type = "test_goto_loop_head"
	}
	Diagnostic.test_goto_loop_operator = 
	{
		type = "test_goto_loop_operator"
	}
	Diagnostic.update_test_simple_import_op = 
	{
		type = "update_test_simple_import_op"
	}
	Diagnostic.update_test_simple_serial_import_op = 
	{
		type = "update_test_simple_serial_import_op"
	}
	Diagnostic.test_soundevent_limiter_lfo = 
	{
		type = "test_soundevent_limiter_lfo"
		max_count = 0.000000
		match_substring = 1.000000
		invert_match = 1.000000
	}
	Diagnostic.test_stop_soundevents_lfo_at_time = 
	{
		type = "test_soundevent_control_lfo_stop_at_time"
	}
	Diagnostic.test_soundevent_block = 
	{
		type = "test_soundevent_block"
		duration = 10.000000
		match_substring = 0.000000
		match_event_name = "Diagnostic.test_soundevent_block"
	}
	Diagnostic.test_soundevent_start_oneshot = 
	{
		type = "test_soundevent_start_oneshot"
		duration = 5.000000
	}
	Diagnostic.test_soundevent_start_lfo = 
	{
		type = "test_soundevent_start_lfo"
		time = 17.000000
	}
	Diagnostic.test_soundevent_start_opvar_get_ancestor = 
	{
		type = "test_soundevent_start_opvar_get_ancestor"
	}
	Diagnostic.test_soundevent_start_opvar_get_parent = 
	{
		type = "test_soundevent_start_opvar_get_parent"
	}
	Diagnostic.test_soundevent_start_opvar_get_parent_space = 
	{
		type = "test_soundevent_start_opvar_get_parent_space"
	}
	Diagnostic.test_get_parent_space = 
	{
		type = "test_get_parent_space"
	}
	Diagnostic.test_import_get_parent_space = 
	{
		type = "test_import_get_parent_space"
	}
	Diagnostic.test_random_multiple = 
	{
		type = "test_random_multiple"
	}
	Diagnostic.test_import_random_multiple = 
	{
		type = "test_import_random_multiple"
	}
	Diagnostic.test_soundevent_start_random_multiple = 
	{
		type = "test_soundevent_start_random_multiple"
	}
	Diagnostic.test_beep_on_track_priority_1 = 
	{
		type = "test_beep_on_track"
		track = "track_1"
		priority = 1.000000
		pitch = 0.950000
		sync_track = "track_1"
		sync_field = "public.sync_points"
		start_point = 
		[
			1.000000,
		]
		end_point = 
		[
			8.000000,
		]
		sync_points = 
		[
			1.000000,
			2.000000,
			3.000000,
			4.000000,
			5.000000,
			6.000000,
			7.000000,
			8.000000,
		]
	}
	Diagnostic.test_beep_on_track_priority_2 = 
	{
		type = "test_beep_on_track"
		track = "track_1"
		priority = 2.000000
		pitch = 1.000000
	}
	Diagnostic.test_beep_on_track_priority_3 = 
	{
		type = "test_beep_on_track"
		track = "track_1"
		priority = 3.000000
		pitch = 1.050000
	}
	Diagnostic.test_beep_on_track_priority_1_override = 
	{
		type = "test_beep_on_track"
		track = "track_1"
		priority = 1.000000
		priority_override = 1.000000
		pitch = 1.100000
	}
	Diagnostic.test_beep_on_track_priority_1_block_equal = 
	{
		type = "test_beep_on_track"
		track = "track_1"
		priority = 1.000000
		block_equal_priority = 1.000000
		pitch = 1.150000
	}
	Diagnostic.test_beep_on_track2_priority_1 = 
	{
		type = "test_beep_on_track"
		track = "track_2"
		priority = 1.000000
		pitch = 0.950000
	}
	Diagnostic.test_beep_on_track2_priority_2 = 
	{
		type = "test_beep_on_track"
		track = "track_2"
		priority = 2.000000
		pitch = 1.000000
	}
	Diagnostic.test_vsnd_on_track_priority_1 = 
	{
		type = "test_vsnd_on_track"
		priority = 1.000000
		block_equal_priority = 1.000000
		pitch = 1.150000
		vsnd_files = 
		[
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd",
		]
	}
	Diagnostic.test_vsnd_on_track_priority_1_sync = 
	{
		type = "test_vsnd_on_track"
		priority = 1.000000
		block_equal_priority = 1.000000
		pitch = 1.150000
		sync_track = "track_1"
		sync_field = "public.sync_points"
		track = "default_track"
		vsnd_files = 
		[
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd",
		]
	}
	Diagnostic.test_vsnd_NO_track_priority_1_sync = 
	{
		type = "test_vsnd_on_track"
		priority = 1.000000
		block_equal_priority = 1.000000
		pitch = 1.150000
		sync_track = "track_1"
		sync_field = "public.sync_points"
		vsnd_files = 
		[
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd",
		]
	}
	Diagnostic.test_vsnd_on_track_no_end = 
	{
		type = "test_vsnd_on_track"
		track = "track_1"
		sync_track = "track_1"
		priority = 1.000000
		vsnd_files = 
		[
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd",
		]
	}
	Diagnostic.test_vsnd_on_track_no_end2 = 
	{
		type = "test_vsnd_on_track"
		track = "track_1"
		sync_track = "track_1"
		priority = 1.000000
		vsnd_files = 
		[
			"sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd",
		]
	}
	Diagnostic.test_stop_default_track = 
	{
		type = "test_stop_track"
		track = "default_track"
	}
	Diagnostic.test_stop_track_1 = 
	{
		type = "test_stop_track"
		track = "track_1"
	}
	Diagnostic.test_stop_track_2 = 
	{
		type = "test_stop_track"
		track = "track_2"
	}
	Diagnostic.test_soundevent_field_override = 
	{
		type = "test_soundevent_field_override"
		notpublic.test1 = 666.666016
		notpublic.test2 = 777.776978
	}
	Diagnostic.core_start_simple_oneshot = 
	{
		type = "core_start_simple_oneshot"
		volume = 0.500000
		vsnd_files = "sounds/diagnostics/bell.vsnd"
	}
	Diagnostic.core_start_oneshot = 
	{
		type = "core_start_oneshot"
		volume_min = 0.100000
		volume_max = 1.000000
		pitch_min = 0.500000
		pitch_max = 1.500000
		vsnd_files = "sounds/diagnostics/bell.vsnd"
	}
	Diagnostic.src1_3d = 
	{
		type = "src1_3d"
		vsnd_files = 
		[
			"sounds/diagnostics/bell.vsnd",
		]
	}
	Diagnostic.test_vmix_8track = 
	{
		type = "test_vmix_8track"
		volume = 0.100000
		vgraph = "test.mix8"
		track1 = "t1"
		track2 = "t2"
		track3 = "t3"
		track4 = "t4"
		track5 = "t5"
		track6 = "t6"
		track7 = "t7"
		track8 = "t8"
		vsnd_files1 = "sounds/diagnostics/bell.vsnd"
		vsnd_files2 = "sounds/diagnostics/beep.vsnd"
		vsnd_files3 = "sounds/diagnostics/ambient/random_amb_sfx/forest_bird01.vsnd"
		vsnd_files4 = "sounds/diagnostics/ambient/thunder/thunder_distant_02.vsnd"
		vsnd_files5 = "sounds/diagnostics/ambient/thunder/thunder_close_01.vsnd"
		vsnd_files6 = "sounds/diagnostics/ambient/thunder/thunder_distant_01.vsnd"
		vsnd_files7 = "sounds/diagnostics/ambient/random_amb_sfx/forest_bird03.vsnd"
		vsnd_files8 = "sounds/diagnostics/ambient/random_amb_sfx/forest_bird02.vsnd"
		volume_test_input = 0.100000
	}
	Diagnostic.test_vmix_vsnd_info = 
	{
		type = "test_vmix_vsnd_info"
		vsnd_files = "sounds/diagnostics/bell.vsnd"
	}
	Diagnostic.test_enum_opvar = 
	{
		type = "test_enum_opvar"
		math_enum = "add"
	}
	Diagnostic.test_system_properties = 
	{
		type = "test_system_properties"
	}
	Diagnostic.BaseTest = 
	{
		type = "src1_3d"
		volume = 0.666000
		volume_rand_min = 66.000000
		volume_rand_max = 666.000000
	}
	Diagnostic.BaseTest2 = 
	{
		base = "Diagnostic.BaseTest"
		volume_rand_max = 777.000000
	}
	Diagnostic.BaseTestNest1 = 
	{
		base = "Diagnostic.BaseTest"
		volume = 111.000000
		volume_rand_min = 111.000000
		volume_rand_max = 111.000000
	}
	Diagnostic.BaseTestNest2 = 
	{
		base = "Diagnostic.BaseTestNest1"
		volume_rand_min = 222.000000
		volume_rand_max = 222.000000
	}
	Diagnostic.BaseTestNest3 = 
	{
		base = "Diagnostic.BaseTestNest2"
		volume_rand_max = 333.000000
	}
	Diagnostic.BaseTestNest4 = 
	{
		base = "Diagnostic.BaseTestNest3"
		volume_rand_min = 444.000000
		volume_rand_max = 444.000000
	}
	Diagnostic.InverseVec3Test = 
	{
		type = "test_inverse_vec3"
		position = 
		[
			0.000000,
			0.000000,
			0.000000,
		]
	}
	Diagnostic.TestSoundEventGroups1 = 
	{
		type = "test_soundevent_groups"
		event_type = 555.000000
		entity_index = 777.000000
	}
	Diagnostic.TestSoundEventGroups2 = 
	{
		type = "test_soundevent_groups"
		event_type = 666.000000
		entity_index = 888.000000
	}
	Diagnostic.TestSoundEventGroups3 = 
	{
		type = "test_soundevent_groups"
		event_type = 555.000000
		entity_index = 888.000000
	}
	Diagnostic.TestSoundEventGroups4 = 
	{
		type = "test_soundevent_groups"
		event_type = 666.000000
		entity_index = 777.000000
	}
	Diagnostic.TestSoundEventGroupStop = 
	{
		type = "test_group_stop"
	}
	Diagnostic.TestSoundEventGroupStatic1 = 
	{
		type = "test_soundevent_groups"
	}
	Diagnostic.TestSoundEventGroupStatic2 = 
	{
		type = "test_soundevent_groups"
	}
	Diagnostic.TestSoundEventGroupStaticBoth = 
	{
		type = "test_soundevent_groups"
	}
	Diagnostic.TestSoundEventGroupStatic3 = 
	{
		type = "test_soundevent_groups"
	}
	Diagnostic.TestSoundEventGroupStatic4 = 
	{
		type = "test_soundevent_groups"
	}
	Diagnostic.TestSubName = 
	{
		type = "test_groups_subname_invert"
	}
	Diagnostic.TestSubNameInvert = 
	{
		type = "test_groups_subname_invert"
		invert = 1.000000
	}
	Diagnostic.TestNoName = 
	{
		type = "test_groups_subname_invert"
	}
	Diagnostic.TestNoNameInvert = 
	{
		type = "test_groups_subname_invert"
		invert = 1.000000
	}
	Diagnostic.TestEntityMatch = 
	{
		type = "test_groups_entindex_invert"
		entity_index = 777.000000
	}
	Diagnostic.TestEntityMatchInvert = 
	{
		type = "test_groups_entindex_invert"
		entity_index = 777.000000
		invert = 1.000000
	}
	Diagnostic.TestEntityNoMatch = 
	{
		type = "test_groups_entindex_invert"
		entity_index = 888.000000
	}
	Diagnostic.TestEntityNoMatchInvert = 
	{
		type = "test_groups_entindex_invert"
		entity_index = 888.000000
		invert = 1.000000
	}
	Diagnostic.TestOpvarMatch = 
	{
		type = "test_groups_opvar_invert"
		opvar = 666.000000
	}
	Diagnostic.TestOpvarMatchInvert = 
	{
		type = "test_groups_opvar_invert"
		opvar = 666.000000
		invert = 1.000000
	}
	Diagnostic.TestOpvarNoMatch = 
	{
		type = "test_groups_opvar_invert"
		opvar = 777.000000
	}
	Diagnostic.TestOpvarNoMatchInvert = 
	{
		type = "test_groups_opvar_invert"
		opvar = 888.000000
		invert = 1.000000
	}
	Diagnostic.TestSoundEventGroupSimple = 
	{
		groups = 
		[
			"duration_group",
		]
		type = "test_soundevent_group_simple"
	}
	Diagnostic.arrangement_diagnostic_testtonelp_01 = 
	{
		type = "core_start_arrangement"
		arrangement = "arrangement_diagnostic_testtonelp_01"
	}
	Diagnostic.arrangement_diagnostic_test_01 = 
	{
		type = "core_start_arrangement"
		arrangement = "arrangement_diagnostic_test_01"
	}
	Diagnostic.TestLFO = 
	{
		type = "test_LFO"
		frequency = 10.000000
	}
	Diagnostic.TestToneLP = 
	{
		type = "core_simple_2d"
		vsnd_files = "sounds/diagnostics/tones.vsnd"
	}
	Diagnostic.TestCurve2d = 
	{
		type = "Diagnostic.TestCurve2d"
		input = 0.250000
		curve = 
		[
			
			[
				0.000000,
				0.000000,
				0.666138,
				0.666138,
				1.000000,
				1.000000,
			],
			
			[
				0.371429,
				0.247423,
				1.476951,
				1.476951,
				1.000000,
				1.000000,
			],
			
			[
				0.551429,
				0.814433,
				1.197282,
				1.197282,
				1.000000,
				1.000000,
			],
			
			[
				1.000000,
				1.000000,
				0.413684,
				0.413684,
				1.000000,
				1.000000,
			],
		]
	}
	Diagnostic.TestGetMixGraphInput = 
	{
		type = "Diagnostic.GetMixGraphInput"
		input_name = "PlayerDSP"
	}
}